# Configuration for ALL environments is contained
# within this file.
# To specify an environment at runtime use the
# command line arg --spring.profiles.active=xxx (local, dev, qaA, qaB, prodA, etc.)
#

# Property declarations common to all environments

# Property overrides specific to an environment


spring:
  profiles:
    active: local
  main:
      web-environment: true
  data:
    mongodb:
      port: 27017
      host: 192.168.99.100
      database: aggregation

management:
  context-path: /rmm-metrics/
  port: 30813
  mainEngine:
    noResponseThresholdInMinutes: 2
endpoints:
  health:
    mapping:
      DOWN: INTERNAL_SERVER_ERROR
kafka:
  clientId:            aggregator-${spring.profiles.active}

server:
  port: 30010

---
spring:
  profiles: prod
  data:
    mongodb:
      host:                          mongos-prod-use1-001-rmmprod1.moreover.local

kafka:
  kafkaHosts:                        kafka-prod-use1-001-rmmprod1.moreover.local:9092
  topicRiskEntityMatch:              rmm-customer-riskentity-match
  consumerGroupRiskEntityMatch:      rmm-aggregator-customer-riskentity-group
  topicCustomerArticleMatch:         rmm-customer-article-match
  consumerGroupCustomerArticleMatch: rmm-aggregator-customer-article-group
  autoOffsetReset:                   latest
  enableAutoCommit:                  false
  kafkaConsumers:                    1
  pollingIntervalMs:                 10000
  retries:                           5
  acks:                              1

services:
  systemService:
    urlRoot:                         system-service.default:80
    endpoints:
      invalidData:                   /api/v1/system/invalidData/

server:
  port: 8080

---
spring:
  profiles: cert
  data:
    mongodb:
      host:                          rmmmongodb-cert-use1-001.moreover.local
      port:                          27017

kafka:
  kafkaHosts:                        kafka-cert-use1-001.moreover.local:9092
  topicRiskEntityMatch:              rmm-customer-riskentity-match
  consumerGroupRiskEntityMatch:      rmm-aggregator-customer-riskentity-group
  topicCustomerArticleMatch:         rmm-customer-article-match
  consumerGroupCustomerArticleMatch: rmm-aggregator-customer-article-group
  autoOffsetReset:                   latest
  enableAutoCommit:                  false
  kafkaConsumers:                    1
  pollingIntervalMs:                 10000
  retries:                           5
  acks:                              1

services:
  systemService:
    urlRoot: system-service.default:80
    endpoints:
      invalidData: /api/v1/system/invalidData/

server:
  port: 8080

---
spring:
  profiles: qa
  data:
    mongodb:
      host:                         rmmmongodb-qa-use1-001.moreover.local
      port:                         27017

kafka:
  kafkaHosts:                        kafka-qa-use1-001.moreover.local:9092
  topicRiskEntityMatch:              rmm-customer-riskentity-match
  consumerGroupRiskEntityMatch:      rmm-aggregator-customer-riskentity-group
  topicCustomerArticleMatch:         rmm-customer-article-match
  consumerGroupCustomerArticleMatch: rmm-aggregator-customer-article-group
  autoOffsetReset:                   latest
  enableAutoCommit:                  false
  kafkaConsumers:                    1
  pollingIntervalMs:                 10000
  retries:                           5
  acks:                              1

services:
  systemService:
    urlRoot: system-service.default:80
    endpoints:
      invalidData: /api/v1/system/invalidData/

server:
  port: 8080

---
spring:
  profiles: dev
  data:
    mongodb:
      host:                         rmmmongodb-dev-use1-001.moreover.local
      port:                         27017

kafka:
  kafkaHosts:                        kafka-dev-use1-001.moreover.local:9092
  topicRiskEntityMatch:              rmm-customer-riskentity-match
  consumerGroupRiskEntityMatch:      rmm-aggregator-customer-riskentity-group
  topicCustomerArticleMatch:         rmm-customer-article-match
  consumerGroupCustomerArticleMatch: rmm-aggregator-customer-article-group
  autoOffsetReset:                   latest
  enableAutoCommit:                  false
  kafkaConsumers:                    1
  pollingIntervalMs:                 10000
  retries:                           5
  acks:                              1

services:
  systemService:
    urlRoot: system-service.default:80
    endpoints:
      invalidData: /api/v1/system/invalidData/

server:
  port: 8080

---
spring:
  profiles: local
  data:
    mongodb:
      host:                         192.168.99.100
      port:                         27017

kafka:
  kafkaHosts:                        192.168.99.100:9092
  topicRiskEntityMatch:              rmm-customer-riskentity-match
  consumerGroupRiskEntityMatch:      rmm-aggregator-customer-riskentity-group
  topicCustomerArticleMatch:         rmm-customer-article-match
  consumerGroupCustomerArticleMatch: rmm-aggregator-customer-article-group
  autoOffsetReset:                   latest
  enableAutoCommit:                  false
  kafkaConsumers:                    1
  pollingIntervalMs:                 10000
  retries:                           5
  acks:                              1

services:
  systemService:
    urlRoot: 192.168.99.100:30004
    endpoints:
      invalidData: /api/v1/system/invalidData/

